//Listing 7-4
package com.packtpub.springhibernate.ch07;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.io.Serializable;
import java.util.Date;

import org.hibernate.Hibernate;
import org.hibernate.HibernateException;
import org.hibernate.usertype.UserType;

public class HistoryType implements UserType {
    private int[] types = {Types.BIGINT, Types.DATE};

    public int[] sqlTypes() {
        return types;
    }

    public Class returnedClass() {
        return History.class;
    }

    public boolean equals(Object a, Object b) throws HibernateException {
        return (a == b) ||
                ((a != null) && (b != null) && (a.equals(b)));
    }

    public int hashCode(Object o) throws HibernateException {
        return o.hashCode();
    }

    public Object nullSafeGet(ResultSet rs, String[] names, Object owner)
            throws HibernateException, SQLException {
        Long initialCapacity = rs.getLong(names[0]);
// check if the last column read is null
        if (rs.wasNull()) return null;
        Date establishmentDate = rs.getDate(names[1]);
        History history = new History();
        history.setInitialCapacity(initialCapacity.longValue());
        history.setEstablishmentDate(establishmentDate);
        return history;
    }

    public void nullSafeSet(PreparedStatement ps, Object value, int index)
            throws HibernateException, SQLException {
        if (value == null) {
            ps.setNull(index, Hibernate.LONG.sqlType());
            ps.setNull(index, Hibernate.DATE.sqlType());
        } else {
            History history = (History) value;
            long initialCapacity = history.getInitialCapacity();
            Date establishmentDate = history.getEstablishmentDate();
            Hibernate.LONG.nullSafeSet(ps, new Long(initialCapacity), index);
            Hibernate.DATE.nullSafeSet(ps, establishmentDate, index + 1);
        }
    }

    public Object deepCopy(Object o) throws HibernateException {
        if (o == null) return null;
        History origHistory = (History) o;
        History newHistory = new History();
        newHistory.setInitialCapacity(origHistory.getInitialCapacity());
        newHistory.setEstablishmentDate(origHistory.getEstablishmentDate());
        return newHistory;
    }

    public boolean isMutable() {
        return true;
    }

    public Serializable disassemble(Object value) throws HibernateException {
        return (Serializable) value;
    }

    public Object assemble(Serializable cached, Object owner)
            throws HibernateException {
        return cached;
    }

    public Object replace(Object original, Object target, Object owner)
            throws HibernateException {
        return original;
    }
}